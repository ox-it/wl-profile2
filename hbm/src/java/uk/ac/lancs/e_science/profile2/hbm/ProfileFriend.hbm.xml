<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping
    PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="uk.ac.lancs.e_science.profile2.hbm">

	<class name="ProfileFriend" table="PROFILE_FRIENDS_T">

	    <id name="id">
	      <column name="ID" not-null="true" length="19" />
	      <generator class="native">
	        <param name="sequence">PROFILE_FRIENDS_S</param>
	      </generator>
	    </id>

	    <property name="userUuid" column="USER_UUID" length="36" not-null="true" />
	    <property name="friendUuid" column="FRIEND_UUID" length="36" not-null="true" />
		<property name="relationship" column="RELATIONSHIP" length="1" not-null="true" />
		<property name="requestedDate" column="REQUESTED_DATE" not-null="true" />
		<property name="confirmed" column="CONFIRMED" not-null="true"/>
	    <property name="confirmedDate" column="CONFIRMED_DATE" not-null="false" />

  		
  	</class>
  	
  	
  	<!-- 
  	<class name="Friend" table="PROFILE_FRIENDS_T">

	    <id name="id">
			<column name="ID"/>
		</id>
		
		<property name="confirmed" />
	
	    <join table="PROFILE_STATUS_T">
	        <key property-ref="userUuid" column="USER_UUID" />
	        <property name="statusMessage" column="MESSAGE" />
	        <property name="statusDate" column="DATE_ADDED" />
	    </join>

	    <join table="SAKAI_PERSON_T">
	        <key property-ref="userUuid" column="AGENT_UUID" />
	        <property name="photo" column="JPEG_PHOTO" />
	    </join>
    </class>
	-->

	<!-- original
	<sql-query name="getFriendsForUser">
		<return alias="friend" class="Friend"/>
    	<![CDATA[
    	select PROFILE_FRIENDS_T.FRIEND_UUID as {friend.userUuid}, PROFILE_FRIENDS_T.CONFIRMED as {friend.confirmed}, PROFILE_STATUS_T.MESSAGE as {friend.statusMessage}, PROFILE_STATUS_T.DATE_ADDED as {friend.statusDate}, SAKAI_PERSON_T.JPEG_PHOTO as {friend.photo} from PROFILE_FRIENDS_T left join PROFILE_STATUS_T on PROFILE_FRIENDS_T.FRIEND_UUID=PROFILE_STATUS_T.USER_UUID left join SAKAI_PERSON_T on PROFILE_FRIENDS_T.FRIEND_UUID=SAKAI_PERSON_T.AGENT_UUID where PROFILE_FRIENDS_T.USER_UUID = :userUuid 
		union
		select PROFILE_FRIENDS_T.USER_UUID as {friend.userUuid}, PROFILE_FRIENDS_T.CONFIRMED as {friend.confirmed}, PROFILE_STATUS_T.MESSAGE as {friend.statusMessage}, PROFILE_STATUS_T.DATE_ADDED as {friend.statusDate}, SAKAI_PERSON_T.JPEG_PHOTO as {friend.photo} from PROFILE_FRIENDS_T left join PROFILE_STATUS_T on PROFILE_FRIENDS_T.USER_UUID=PROFILE_STATUS_T.USER_UUID left join SAKAI_PERSON_T on PROFILE_FRIENDS_T.FRIEND_UUID=SAKAI_PERSON_T.AGENT_UUID where PROFILE_FRIENDS_T.FRIEND_UUID = :friendUuid 
		]]>
	</sql-query>
	-->

	<!-- 
	<sql-query name="getFriendsForUser">
    	<![CDATA[
    	select PROFILE_FRIENDS_T.FRIEND_UUID from PROFILE_FRIENDS_T where PROFILE_FRIENDS_T.USER_UUID = :userUuid 
		]]>
	</sql-query>
	-->



<!-- 
<resultset name="personAddress">
    <return alias="person" class="eg.Person"/>
    <return-join alias="address" property="person.mailingAddress"/>
</resultset>

<sql-query name="personsWith" resultset-ref="personAddress">
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person
    JOIN ADDRESS address
        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
    WHERE person.NAME LIKE :namePattern
</sql-query>

-->


	<!-- 
	<sql-query name="persons">
    <return alias="person" class="eg.Person"/>
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex}
    FROM PERSON person
    WHERE person.NAME LIKE :namePattern
</sql-query>
-->
	<!-- 
	<sql-query name="getFriendsForUser">
    	<![CDATA[
    	select PROFILE_FRIENDS_T.FRIEND_UUID, PROFILE_FRIENDS_T.CONFIRMED, PROFILE_STATUS_T.MESSAGE, PROFILE_STATUS_T.DATE_ADDED, SAKAI_PERSON_T.JPEG_PHOTO from PROFILE_FRIENDS_T left join PROFILE_STATUS_T on PROFILE_FRIENDS_T.FRIEND_UUID=PROFILE_STATUS_T.USER_UUID left join SAKAI_PERSON_T on PROFILE_FRIENDS_T.FRIEND_UUID=SAKAI_PERSON_T.AGENT_UUID where PROFILE_FRIENDS_T.USER_UUID = :userUuid 
		union
		select PROFILE_FRIENDS_T.USER_UUID, PROFILE_FRIENDS_T.CONFIRMED, PROFILE_STATUS_T.MESSAGE, PROFILE_STATUS_T.DATE_ADDED, SAKAI_PERSON_T.JPEG_PHOTO from PROFILE_FRIENDS_T left join PROFILE_STATUS_T on PROFILE_FRIENDS_T.USER_UUID=PROFILE_STATUS_T.USER_UUID left join SAKAI_PERSON_T on PROFILE_FRIENDS_T.FRIEND_UUID=SAKAI_PERSON_T.AGENT_UUID where PROFILE_FRIENDS_T.FRIEND_UUID = :friendUuid 
		]]>
	</sql-query>
	-->
	
	
	
	<query name="getFriendRequest">
    	<![CDATA[from ProfileFriend friend WHERE friend.friendUuid = :friendUuid AND friend.userUuid = :userUuid AND friend.confirmed = :confirmed]]>
	</query>
	

</hibernate-mapping>
